head	1.19;
access;
symbols;
locks
	cacti:1.19; strict;
comment	@# @;


1.19
date	2007.01.01.18.32.36;	author cacti;	state Exp;
branches;
next	1.18;

1.18
date	2007.01.01.06.44.15;	author cacti;	state Exp;
branches;
next	1.17;

1.17
date	2006.12.31.20.30.51;	author cacti;	state Exp;
branches;
next	1.16;

1.16
date	2006.12.31.19.44.08;	author cacti;	state Exp;
branches;
next	1.15;

1.15
date	2006.12.31.06.01.29;	author cacti;	state Exp;
branches;
next	1.14;

1.14
date	2006.12.31.05.43.19;	author cacti;	state Exp;
branches;
next	1.13;

1.13
date	2006.12.31.05.32.11;	author cacti;	state Exp;
branches;
next	1.12;

1.12
date	2006.12.30.22.17.44;	author cacti;	state Exp;
branches;
next	1.11;

1.11
date	2006.12.30.20.07.19;	author cacti;	state Exp;
branches;
next	1.10;

1.10
date	2006.12.30.05.47.02;	author cacti;	state Exp;
branches;
next	1.9;

1.9
date	2006.12.28.01.58.03;	author cacti;	state Exp;
branches;
next	1.8;

1.8
date	2006.12.27.21.55.38;	author cacti;	state Exp;
branches;
next	1.7;

1.7
date	2006.12.27.05.12.14;	author cacti;	state Exp;
branches;
next	1.6;

1.6
date	2006.12.27.03.01.40;	author cacti;	state Exp;
branches;
next	1.5;

1.5
date	2006.12.27.02.54.17;	author cacti;	state Exp;
branches;
next	1.4;

1.4
date	2006.12.27.02.47.33;	author cacti;	state Exp;
branches;
next	1.3;

1.3
date	2006.12.27.01.54.20;	author cacti;	state Exp;
branches;
next	1.2;

1.2
date	2006.12.26.21.52.32;	author cacti;	state Exp;
branches;
next	1.1;

1.1
date	2006.12.25.21.43.02;	author cacti;	state Exp;
branches;
next	;


desc
@@


1.19
log
@Skip nfs mounts .
@
text
@#!/bin/bash

#usage: install.sh machine-name username passwd
urlencode() {
    echo "$1" | sed -e 's/ /+/g' -e 's/&/%26/g' -e 's/\//%2F/g' -e 's/:/%3A/g'
}

# Check if wget is there
wget --version > /dev/null 2>&1

if [ $? -ne 0 ]; then 
 echo "wget is needed. Please make sure it is installed and in your path."
 exit 1
fi

# Check if cron job is allowed. 
if [ ! -u /usr/bin/crontab ]; then
 echo "You do not have permissioin to run cron job. You may need"
 echo "to fix it by running \"chmod u+s /usr/bin/crontab\" as root"
 echo "and then run this installation again."
 exit 1
fi


# Check OS version. Currently only supports 2.6.x and 2.4.x
ver=`uname -r |awk -F'.' '{OFS=""; print \$1, \$2}'`
if [ $ver -ne 26 -a $ver -ne 24 ]; then
 echo "Sorry, current version only supports Linux kernel 2.6.x" 
 echo "Installation cancelled" 
 exit 1
fi 

if [ $# -ne 3 ]; then
 echo "Usage: `basename $0`  machine-name username passwd"
 echo "Example: `basename $0` web4 webapp webpswd"
 exit 1
fi

pswd=`echo -n $3 |md5sum |cut -d ' ' -f 1`

baseURL="/usr/bin/wget -o /dev/null -O - http://mnt.edoors.info/receiver.php?host=$1&group=$2&pwd=$pswd"

PWD=`pwd`
conf="$PWD/conf.sh"

cat > $conf <<EOF 
urlencode() {
    echo "\$1" | sed -e 's/ /+/g' -e 's/&/%26/g' -e 's/\//%2F/g' -e 's/:/%3A/g'
}

EOF


# save local configuration
# network interfaces
ifs=`tail -n +3 /proc/net/dev |awk -F':' '{ORS=" ";print \$1}'`
echo "ifs=\"$ifs\"" >> $conf

# disk partitions and mounts
parts=`df -x tmpfs -x nfs |tail -n +2 |awk '{ORS=" "; print \$1}' |sed -e 's/\/dev\///g'`
echo "parts=\"$parts\"" >> $conf
mnts=`df -x tmpfs -x nfs |tail -n +2 |awk '{ORS=" "; print \$6}'`

# create rrd files on server 
# CPU usage (user, system, idle, iowait ) and load avg (1, 5 and 15min) 
url=`urlencode "user system idle iowait"`
newkey=`${baseURL}\&act=create\&type=cpu-usage\&data=$url\&dt=g`

if [ "$newkey" == "access-denied" -o $? -ne 0 ]; then
 echo "Installation 1 failed. Please contact oneway."
 exit 1
else 
 updtURL="/usr/bin/wget -o /dev/null -O /dev/null http://mnt.edoors.info/receiver.php?host=$1&group=$2&pwd=$newkey"
 echo "baseURL=\"$updtURL\"" >> $conf
fi

url=`urlencode "1min 5min 15min"`
${baseURL}\&act=create\&type=cpu-load\&data=$url\&dt=g

# mem usage: free, buffers, cache, used (stacked) and swap (line) 
url=`urlencode "free buffers cache used swap"`
${baseURL}\&act=create\&type=mem-usage\&data=$url\&dt=g

#processes (sleeping, stoped, zombi, running) (stacked) 
url=`urlencode "sleeping stopped zombie running"`
${baseURL}\&act=create\&type=proc-usage\&data=$url\&dt=g

# disk read & write and usage -- send mount points to server
# RRDTOOL DS names can not have '/', so replace with '_'
tmp=`echo $mnts | sed -e 's/\//_/g'`
url=`urlencode "$tmp"`
${baseURL}\&act=create\&type=disk-read\&data=$url\&dt=c
${baseURL}\&act=create\&type=disk-write\&data=$url\&dt=c
${baseURL}\&act=create\&type=disk-usage\&data=$url\&dt=g

# network IO:  a separate inf for each rrd
url=`urlencode "incoming outgoing"`
for dev in $ifs; do 
 ${baseURL}\&act=create\&type=net-$dev\&data=$url\&dt=c
done

# tcp socket usage (est, syn_sent, last_ack) 
url=`urlencode "estab syn_sent last_ack"`
${baseURL}\&act=create\&type=sock-usage\&data=$url\&dt=g

# do cron only first time installation 
if [ ! -f crontab ]; then
# generate crontab file 
 /usr/bin/crontab -l > crontab 2> /dev/null
 echo "*/4 * * * * $PWD/reporter.sh" >> crontab

#submit to cron
 /usr/bin/crontab -r > /dev/null 2>&1 
 /usr/bin/crontab crontab 
fi 

/usr/bin/wget -o /dev/null -O reporter.sh http://mnt.edoors.info/reporter.sh 

if [ $? -ne 0 ]; then 
 echo "Installation 2 failed. Please contact oneway."
 exit 1
fi

chmod u+x reporter.sh

echo Installation completed. 

@


1.18
log
@added authentication.
@
text
@d60 1
a60 1
parts=`df -x tmpfs |tail -n +2 |awk '{ORS=" "; print \$1}' |sed -e 's/\/dev\///g'`
d62 1
a62 1
mnts=`df -x tmpfs |tail -n +2 |awk '{ORS=" "; print \$6}'`
@


1.17
log
@NOw support 2.4
too
@
text
@d39 3
a41 1
baseURL="/usr/bin/wget -o /dev/null -O /dev/null http://mnt.edoors.info/receiver.php?host=$1&group=$2&pwd=$3"
a52 1
echo "baseURL=\"$baseURL\"" >> $conf
d67 1
a67 3
${baseURL}\&act=create\&type=cpu-usage\&data=$url\&dt=g
url=`urlencode "1min 5min 15min"`
${baseURL}\&act=create\&type=cpu-load\&data=$url\&dt=g
d69 1
a69 1
if [ $? -ne 0 ]; then 
d72 3
d77 3
@


1.16
log
@make sure chmod u+x reporter.sh after it is downloaded.
@
text
@d25 1
a25 1
# Check OS version. Currently only supports 2.6.x
d27 1
a27 1
if [ $ver -ne 26 ]; then 
@


1.15
log
@check permission of crontab
@
text
@d119 2
@


1.14
log
@mute output of wget
@
text
@d16 9
d104 1
a104 1
 /usr/bin/crontab -l > crontab 
d108 1
a108 1
 /usr/bin/crontab -r 
@


1.13
log
@check if wget is there
@
text
@d9 1
a9 1
wget --version
@


1.12
log
@include lo as the net interface
@
text
@d8 8
@


1.11
log
@fixed net interface
@
text
@d38 1
a38 1
ifs=`tail -n +3 /proc/net/dev |grep -v " lo:" |awk -F':' '{ORS=" ";print \$1}'`
@


1.10
log
@fixed / in ds names: replace with _
@
text
@d77 1
a77 1
 ${baseURL}\&act=create\&type=net-io\&if=$dev\&data=$url\&dt=c
@


1.9
log
@eliminated 'cat' parameter.
@
text
@d22 1
a22 1
baseURL="/usr/bin/wget -o /dev/null http://mnt.edoors.info/receiver.php?host=$1\&group=$2\&pwd=$3"
d34 1
a34 1
echo "baseURL=\"/usr/bin/wget -o /dev/null http://mnt.edoors.info/receiver.php?host=$1\&group=$2\&pwd=$3\"" >> $conf
a40 2
echo `urlencode "$ifs"`

a44 1
echo $mnts
d49 1
a49 1
${baseURL}\&act=create\&type=cpu-usage\&data=$url
d51 1
a51 1
${baseURL}\&act=create\&type=cpu-load\&data=$url
a52 1
true
d60 1
a60 1
${baseURL}\&act=create\&type=mem-usage\&data=$url
d64 1
a64 1
${baseURL}\&act=create\&type=proc-usage\&data=$url
d67 6
a72 4
url=`urlencode "$mnts"`
${baseURL}\&act=create\&type=disk-read\&data=$url
${baseURL}\&act=create\&type=disk-write\&data=$url
${baseURL}\&act=create\&type=disk-usage\&data=$url
d77 1
a77 1
 ${baseURL}\&act=create\&type=net-io\&if=$dev\&data=$url
d82 1
a82 1
${baseURL}\&act=create\&type=sock-usage\&data=$url
@


1.8
log
@added OS veresion detection. Sends DS names to server .
@
text
@d52 1
a52 1
${baseURL}\&act=create\&type=cpu\&cat=usage\&data=$url
d54 1
a54 1
${baseURL}\&act=create\&type=cpu\&cat=load\&data=$url
d64 1
a64 1
${baseURL}\&act=create\&type=mem\&cat=usage\&data=$url
d68 1
a68 1
${baseURL}\&act=create\&type=proc\&cat=usage\&data=$url
d72 3
a74 3
${baseURL}\&act=create\&type=disk\&cat=read\&data=$url
${baseURL}\&act=create\&type=disk\&cat=write\&data=$url
${baseURL}\&act=create\&type=disk\&cat=usage\&data=$url
d79 1
a79 1
 ${baseURL}\&act=create\&type=net\&cat=io\&if=$dev\&data=$url
d84 1
a84 1
${baseURL}\&act=create\&type=sock\&cat=usage\&data=$url
@


1.7
log
@consistency fix, and do not do cron if not first time
@
text
@d8 8
d51 4
a54 2
${baseURL}\&act=create\&type=cpu\&cat=usage
${baseURL}\&act=create\&type=cpu\&cat=load
d63 2
a64 1
${baseURL}\&act=create\&type=mem\&cat=usage
d67 2
a68 1
${baseURL}\&act=create\&type=proc\&cat=usage
d77 1
d79 1
a79 1
 ${baseURL}\&act=create\&type=net\&cat=io\&if=$dev
d83 2
a84 1
 ${baseURL}\&act=create\&type=sock\&cat=usage
@


1.6
log
@pass the urlencode function to conf.sh
@
text
@d42 1
a42 1
# CPU usage (user, system, iowat, idle ) and load avg (1, 5 and 15min) 
d52 1
a52 1
# mem usage: buffers, cache, used, free (stacked) and swap (line) 
d69 1
a69 1
# tcp socket usage and open files (est, syn_sent, last_ack, ofd) 
d72 2
d75 2
a76 2
/usr/bin/crontab -l > crontab 
echo "*/4 * * * * $PWD/reporter.sh" >> crontab
d79 3
a81 2
#/usr/bin/crontab -r 
#/usr/bin/crontab crontab 
@


1.5
log
@*** empty log message ***
@
text
@d19 8
a26 1
echo "baseURL=\"/usr/bin/wget -o /dev/null http://mnt.edoors.info/receiver.php?host=$1\&group=$2\&pwd=$3\"" > $conf
@


1.4
log
@almost final , believe
@
text
@d67 1
a67 1
echo "*/4 * * * * $PWD/reporter.sh $1 $2 $3" >> crontab
@


1.3
log
@*** empty log message ***
@
text
@d35 1
a35 1
# CPU usage 
d37 1
d48 3
@


1.2
log
@*** empty log message ***
@
text
@d5 1
a5 1
    echo "$1" | sed -e 's/ /+/g' -e 's/&/%26/'
d14 2
d19 2
d23 4
a26 2
ifs=`tail -n +3 /proc/net/dev |awk -F':' '{print \$1}' |grep -v " lo\$"`
echo "ifs=\"$ifs\"" > $conf
d35 2
a36 2
# CPU usage
/usr/bin/wget -o /dev/null http://mnt.edoors.info/receiver.php?act=create\&host=$1\&group=$2\&pwd=$3
d38 1
a38 1
ls > /dev/null
d44 17
@


1.1
log
@Initial revision
@
text
@d4 3
d15 12
d29 2
a30 1
/usr/bin/wget -o /dev/null http://mnt.edoors.com/receiver.php?act=create\&host=$1\&user=$2\&pwd=$3
d32 1
d43 2
a44 2
/usr/bin/crontab -r 
/usr/bin/crontab crontab 
d46 1
a46 1
/usr/bin/wget -o /dev/null -O reporter.sh http://mnt.edoors.com/reporter.sh 
@
